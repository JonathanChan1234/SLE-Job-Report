{"version":3,"sources":["components/DataTable.js","utils/utils.js","components/GoogleSheetWrapper.js","components/ErrorBoundary.js","App.js","utils/constants.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","table","minWidth","maxWidth","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","DataTable","record","staff_list","classes","useState","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDay","getTodayDate","reportDate","setReportDate","Box","justifyContent","className","noValidate","TextField","id","label","type","value","onChange","event","target","onJobReportDateChanged","InputLabelProps","shrink","TableContainer","component","Paper","Table","size","TableHead","TableRow","TableCell","TableBody","dailyJobReport","slice","length","filter","dateInSlash","dateInHyphen","setHours","compared_date","getTime","error","compareRecordDate","dailyStaffResponseList","map","staff","name","response","forEach","sort","comparedStaff","responseRate","toFixed","unshift","key","renderStaffResponseList","GoogleSheetWrapper","report_range","staff_list_range","reset","forceReset","Button","onClick","range","staff_list_loading","loading","staff_list_error","staff_list_data","data","LinearProgress","JSON","stringify","report_list_loading","report_list_error","report_list_data","ErrorBoundary","props","state","hasError","errorInfo","console","log","this","children","React","Component","SheetsDemo","clientId","apiKey","authorize","apiLoading","signout","signedIn","CircularProgress","variant","color","App","flexDirection","p","m","bgcolor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yYAaMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,SAAU,IACVC,SAAU,KAEdC,UAAW,CACPC,QAAS,OACTC,SAAU,QAEdC,UAAW,CACPC,WAAYR,EAAMS,QAAQ,GAC1BC,YAAaV,EAAMS,QAAQ,GAC3BE,MAAO,SAoFAC,EAhFG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WACnBC,EAAUjB,IAD0B,EAENkB,mBC/BZ,WACxB,IAAMC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,cACZC,EAAQC,OAAOL,EAAKM,WAAa,GAAGC,SAAS,EAAG,KAChDC,EAAMH,OAAOL,EAAKS,UAAUF,SAAS,EAAG,KAC9C,MAAM,GAAN,OAAUL,EAAV,YAAkBE,EAAlB,YAA2BI,GD0BkBE,IAFH,mBAEnCC,EAFmC,KAEvBC,EAFuB,KA6C1C,OACI,6BACI,kBAACC,EAAA,EAAD,CAAKzB,QAAQ,OAAO0B,eAAe,UAC/B,0BAAMC,UAAWjB,EAAQX,UAAW6B,YAAU,GAC1C,kBAACC,EAAA,EAAD,CACIC,GAAG,OACHC,MAAM,aACNC,KAAK,OACLC,MAAOV,EACPI,UAAWjB,EAAQR,UACnBgC,SAAU,SAACC,GAAD,OAnDC,SAACA,GAC5BX,EAAcW,EAAMC,OAAOH,OAkDUI,CAAuBF,IAC5CG,gBAAiB,CACbC,QAAQ,OAMxB,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACjB,EAAA,EAAD,CAAKzB,QAAQ,OAAO0B,eAAe,UAC/B,kBAACiB,EAAA,EAAD,CAAOhB,UAAWjB,EAAQd,MAAOgD,KAAK,SAClC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,yBAGR,kBAACC,EAAA,EAAD,KAhEY,WAC5B,IACMC,EADYzC,EAAO0C,MAAM,EAAG1C,EAAO2C,QACRC,QAAO,SAAC5C,GAAD,OC/Bf,SAAC6C,EAAaC,GAC3C,IACI,IAAM1C,EAAO,IAAIC,KAAKwC,GACtBzC,EAAK2C,SAAS,EAAG,EAAG,EAAG,GACvB,IAAMC,EAAgB,IAAI3C,KAAKyC,GAE/B,OADAE,EAAcD,SAAS,EAAG,EAAG,EAAG,GACzB3C,EAAK6C,YAAcD,EAAcC,UAC1C,MAAOC,GACL,MAAMA,GDwBFC,CAAkBnD,EAAO,GAAIe,MAE3BqC,EAAyBnD,EAAWoD,KAAI,SAACC,GAAD,MAAY,CACtDC,KAAMD,EACNE,SAAU,MAEdf,EAAegB,SAAQ,SAACzD,GACpBoD,EAAuBK,SAAQ,SAACH,GACxBA,EAAMC,OAASvD,EAAO,IACtBsD,EAAME,iBAIlBJ,EAAuBM,MACnB,SAACJ,EAAOK,GAAR,OAA0BA,EAAcH,SAAWF,EAAME,YAE7D,IAAMI,GAGE,IAFHR,EAAuBR,QAAO,SAACU,GAAD,OAAWA,EAAME,SAAW,KACtDb,OAELS,EAAuBT,QACzBkB,QAAQ,GAKV,OAJAT,EAAuBU,QAAQ,CAC3BP,KAAM,gBACNC,SAAS,GAAD,OAAKI,EAAL,OAELR,EAAuBC,KAAI,SAACC,GAAD,OAC9B,kBAAChB,EAAA,EAAD,CAAUyB,IAAKT,EAAMC,MACjB,kBAAChB,EAAA,EAAD,KAAYe,EAAMC,MAClB,kBAAChB,EAAA,EAAD,KAAYe,EAAME,cAgCEQ,SElCrBC,EA9DY,SAAC,GAA4C,IAA1C3C,EAAyC,EAAzCA,GAAI4C,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,iBAAuB,EACvChE,oBAAS,GAD8B,mBAC5DiE,EAD4D,KACrDC,EADqD,KAGnE,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMF,GAAYD,KAAnC,eACA,kBAAC,IAAD,CAAaI,MAAOL,EAAkB7C,GAAIA,IACrC,gBACYmD,EADZ,EACGC,QACOC,EAFV,EAEGzB,MACM0B,EAHT,EAGGC,KAHH,OAKGJ,EACI,6BACI,kBAACK,EAAA,EAAD,MACA,qEAEJH,EACA,2BAAII,KAAKC,UAAUL,EAAkB,KAAM,IAC3CC,EACA,kBAAC,IAAD,CAAatD,GAAIA,EAAIkD,MAAON,IACvB,gBACYe,EADZ,EACGP,QACOQ,EAFV,EAEGhC,MACMiC,EAHT,EAGGN,KAHH,OAKGI,EACI,6BACI,kBAACH,EAAA,EAAD,MACA,qEAIJI,EACA,2BACKH,KAAKC,UACFE,EACA,KACA,IAGRC,EACA,kBAAC,EAAD,CACInF,OAAQmF,EACRlF,WAAY2E,EAAgBvB,KACxB,SAACC,GAAD,OAAWA,EAAM,QAIzB,oDAKZ,sD,gCC9BT8B,E,kDA1BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFV,E,8DAUDrC,EAAOsC,GAErBC,QAAQC,IAAIxC,GACZuC,QAAQC,IAAIF,K,+BAIZ,OAAIG,KAAKL,MAAMC,SAEJ,qDAGJI,KAAKN,MAAMO,Y,gDAjBU1C,GAE5B,MAAO,CAAEqC,UAAU,O,GARCM,IAAMC,WCa5BC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAb,OACf,kBAAC,IAAD,CAAiBD,SAAUA,EAAUC,OAAQA,IACxC,gBAAGC,EAAH,EAAGA,UAAoBC,EAAvB,EAAczB,QAAqB0B,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,SAAUnD,EAAtD,EAAsDA,MAAtD,OACG,6BACKiD,EACG,kBAACG,EAAA,EAAD,MACApD,EACA,6BAAM6B,KAAKC,UAAU9B,EAAO,KAAM,IAClCmD,EACA,kBAAC/B,EAAA,EAAD,CACIiC,QAAQ,YACRC,MAAM,YACNjC,QAAS6B,GAHb,YAOA,kBAAC9B,EAAA,EAAD,CACIiC,QAAQ,YACRC,MAAM,UACNjC,QAAS2B,GAHb,aAOHG,GACG,kBAAC,EAAD,CACIlC,iBCvCQ,kBDwCRD,aCvCI,mCDwCJ5C,GC1CA,sDDoETmF,MAlBf,WACI,OACI,yBAAKtF,UAAU,OACX,kBAAC,EAAD,KACI,kBAACF,EAAA,EAAD,CACIzB,QAAQ,OACRkH,cAAc,SACdC,EAAG,EACHC,EAAG,EACHC,QAAQ,oBACR,8CACA,kBAAC,EAAD,CAAYb,SCzD5B,0EDyDiDC,OAAO,SEjDxCa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5E,GACLuC,QAAQvC,MAAMA,EAAM6E,c","file":"static/js/main.ded31432.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { getTodayDate, compareRecordDate } from '../utils/utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    table: {\r\n        minWidth: 300,\r\n        maxWidth: 700,\r\n    },\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst DataTable = ({ record, staff_list }) => {\r\n    const classes = useStyles();\r\n    const [reportDate, setReportDate] = useState(getTodayDate());\r\n\r\n    const onJobReportDateChanged = (event) => {\r\n        setReportDate(event.target.value);\r\n    };\r\n\r\n    const renderStaffResponseList = () => {\r\n        const jobReport = record.slice(1, record.length);\r\n        const dailyJobReport = jobReport.filter((record) =>\r\n            compareRecordDate(record[1], reportDate)\r\n        );\r\n        const dailyStaffResponseList = staff_list.map((staff) => ({\r\n            name: staff,\r\n            response: 0,\r\n        }));\r\n        dailyJobReport.forEach((record) => {\r\n            dailyStaffResponseList.forEach((staff) => {\r\n                if (staff.name === record[2]) {\r\n                    staff.response++;\r\n                }\r\n            });\r\n        });\r\n        dailyStaffResponseList.sort(\r\n            (staff, comparedStaff) => comparedStaff.response - staff.response\r\n        );\r\n        const responseRate = (\r\n            (dailyStaffResponseList.filter((staff) => staff.response > 0)\r\n                .length *\r\n                100) /\r\n            dailyStaffResponseList.length\r\n        ).toFixed(2);\r\n        dailyStaffResponseList.unshift({\r\n            name: 'Response Rate',\r\n            response: `${responseRate}%`,\r\n        });\r\n        return dailyStaffResponseList.map((staff) => (\r\n            <TableRow key={staff.name}>\r\n                <TableCell>{staff.name}</TableCell>\r\n                <TableCell>{staff.response}</TableCell>\r\n            </TableRow>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Box display='flex' justifyContent='center'>\r\n                <form className={classes.container} noValidate>\r\n                    <TextField\r\n                        id='date'\r\n                        label='ORDER DATE'\r\n                        type='date'\r\n                        value={reportDate}\r\n                        className={classes.textField}\r\n                        onChange={(event) => onJobReportDateChanged(event)}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </form>\r\n            </Box>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Box display='flex' justifyContent='center'>\r\n                    <Table className={classes.table} size='small'>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Staff Name</TableCell>\r\n                                <TableCell>No of Response</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>{renderStaffResponseList()}</TableBody>\r\n                    </Table>\r\n                </Box>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataTable;\r\n","export const getTodayDate = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDay()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n};\r\n\r\nexport const compareRecordDate = (dateInSlash, dateInHyphen) => {\r\n    try {\r\n        const date = new Date(dateInSlash);\r\n        date.setHours(0, 0, 0, 0);\r\n        const compared_date = new Date(dateInHyphen);\r\n        compared_date.setHours(0, 0, 0, 0);\r\n        return date.getTime() === compared_date.getTime();\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { GoogleSheet } from '@lourd/react-google-sheet';\r\nimport { LinearProgress, Button } from '@material-ui/core';\r\nimport DataTable from './DataTable';\r\n\r\nconst GoogleSheetWrapper = ({ id, report_range, staff_list_range }) => {\r\n    const [reset, forceReset] = useState(false);\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={() => forceReset(!reset)}>Reload Data</Button>\r\n            <GoogleSheet range={staff_list_range} id={id}>\r\n                {({\r\n                    loading: staff_list_loading,\r\n                    error: staff_list_error,\r\n                    data: staff_list_data,\r\n                }) =>\r\n                    staff_list_loading ? (\r\n                        <div>\r\n                            <LinearProgress />\r\n                            <h5>Getting Staff List from Google Sheet</h5>\r\n                        </div>\r\n                    ) : staff_list_error ? (\r\n                        <p>{JSON.stringify(staff_list_error, null, 2)}</p>\r\n                    ) : staff_list_data ? (\r\n                        <GoogleSheet id={id} range={report_range}>\r\n                            {({\r\n                                loading: report_list_loading,\r\n                                error: report_list_error,\r\n                                data: report_list_data,\r\n                            }) =>\r\n                                report_list_loading ? (\r\n                                    <div>\r\n                                        <LinearProgress />\r\n                                        <h5>\r\n                                            Getting Job Report from Google Sheet\r\n                                        </h5>\r\n                                    </div>\r\n                                ) : report_list_error ? (\r\n                                    <p>\r\n                                        {JSON.stringify(\r\n                                            report_list_error,\r\n                                            null,\r\n                                            2\r\n                                        )}\r\n                                    </p>\r\n                                ) : report_list_data ? (\r\n                                    <DataTable\r\n                                        record={report_list_data}\r\n                                        staff_list={staff_list_data.map(\r\n                                            (staff) => staff[0]\r\n                                        )}\r\n                                    />\r\n                                ) : (\r\n                                    <p>No Job Report Data</p>\r\n                                )\r\n                            }\r\n                        </GoogleSheet>\r\n                    ) : (\r\n                        <p>No Staff List Data</p>\r\n                    )\r\n                }\r\n            </GoogleSheet>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GoogleSheetWrapper;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        console.log(error);\r\n        console.log(errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\nimport { GoogleSheetsApi } from '@lourd/react-google-sheet';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Button, Box } from '@material-ui/core';\nimport './App.css';\n\nimport {\n    CLIENT_ID,\n    SHEET_ID,\n    REPORT_RANGE,\n    STAFF_LIST_RANGE,\n} from './utils/constants';\nimport GoogleSheetWrapper from './components/GoogleSheetWrapper';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nconst SheetsDemo = ({ clientId, apiKey }) => (\n    <GoogleSheetsApi clientId={clientId} apiKey={apiKey}>\n        {({ authorize, loading: apiLoading, signout, signedIn, error }) => (\n            <div>\n                {apiLoading ? (\n                    <CircularProgress />\n                ) : error ? (\n                    <div>{JSON.stringify(error, null, 2)}</div>\n                ) : signedIn ? (\n                    <Button\n                        variant='contained'\n                        color='secondary'\n                        onClick={signout}>\n                        Sign Out\n                    </Button>\n                ) : (\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={authorize}>\n                        Authorize\n                    </Button>\n                )}\n                {signedIn && (\n                    <GoogleSheetWrapper\n                        staff_list_range={STAFF_LIST_RANGE}\n                        report_range={REPORT_RANGE}\n                        id={SHEET_ID}\n                    />\n                )}\n            </div>\n        )}\n    </GoogleSheetsApi>\n);\n\nfunction App() {\n    return (\n        <div className='App'>\n            <ErrorBoundary>\n                <Box\n                    display='flex'\n                    flexDirection='column'\n                    p={1}\n                    m={1}\n                    bgcolor='background.paper'>\n                    <h2>SLE Job Report</h2>\n                    <SheetsDemo clientId={CLIENT_ID} apiKey='' />\n                </Box>\n            </ErrorBoundary>\n        </div>\n    );\n}\n\nexport default App;\n","export const SHEET_ID = '1R9ti3zfqMCA9Cq3JjZAlfkIGMh6iC3atIlXN6aNKq8E';\r\nexport const STAFF_LIST_RANGE = 'Staff_List!A1:A';\r\nexport const REPORT_RANGE = '表單回應 1!A1:AN';\r\nexport const CLIENT_ID =\r\n    '27475518606-8bkoo1kd27attnr63le9mqur08314b0r.apps.googleusercontent.com';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}